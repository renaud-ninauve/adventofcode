package fr.ninauve.renaud.adventofcode.year2024.day16;

import org.junit.jupiter.api.Test;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

class Part01Test {

    @Test
    void toOutput() {
        Grid grid = Grid.fromInput(List.of(
                "###############",
                "#.......#....E#",
                "#.#.###.#.###.#",
                "#.....#.#...#.#",
                "#.###.#####.#.#",
                "#.#.#.......#.#",
                "#.#.#####.###.#",
                "#...........#.#",
                "###.#.#####.#.#",
                "#...#.....#.#.#",
                "#.#.#.###.#.#.#",
                "#.....#...#.#.#",
                "#.###.#.#.#.#.#",
                "#S..#.....#...#",
                "###############"
        ));

        List<String> actual = Part01.toOutput(grid, List.of(Action.TURN_COUNTERCLOCKWISE, Action.MOVE_STRAIGHT, Action.MOVE_STRAIGHT, Action.TURN_CLOCKWISE, Action.MOVE_STRAIGHT));

        assertThat(actual).containsExactly(
                "###############",
                "#.......#....E#",
                "#.#.###.#.###.#",
                "#.....#.#...#.#",
                "#.###.#####.#.#",
                "#.#.#.......#.#",
                "#.#.#####.###.#",
                "#...........#.#",
                "###.#.#####.#.#",
                "#...#.....#.#.#",
                "#.#.#.###.#.#.#",
                "#>>...#...#.#.#",
                "#^###.#.#.#.#.#",
                "#^..#.....#...#",
                "###############"
        );
    }

    @Test
    void findMinActions1() {
        List<String> input = List.of(
                "###############",
                "#.......#....E#",
                "#.#.###.#.###.#",
                "#.....#.#...#.#",
                "#.###.#####.#.#",
                "#.#.#.......#.#",
                "#.#.#####.###.#",
                "#...........#.#",
                "###.#.#####.#.#",
                "#...#.....#.#.#",
                "#.#.#.###.#.#.#",
                "#.....#...#.#.#",
                "#.###.#.#.#.#.#",
                "#S..#.....#...#",
                "###############"
        );
        Grid grid = Grid.fromInput(input);
        List<Action> actions = Part01.findMinActions(input);

        List<String> actual = Part01.toOutput(grid, actions);

        assertThat(actual).containsExactly(
                "###############",
                "#.......#....^#",
                "#.#.###.#.###^#",
                "#.....#.#...#^#",
                "#.###.#####.#^#",
                "#.#.#.......#^#",
                "#.#.#####.###^#",
                "#..>>>>>>>>v#^#",
                "###^#.#####v#^#",
                "#>>^#.....#v#^#",
                "#^#.#.###.#v#^#",
                "#^....#...#v#^#",
                "#^###.#.#.#v#^#",
                "#^..#.....#>>^#",
                "###############"
        );
    }

    @Test
    void findMinActions2() {
        List<String> input = List.of(
                "#################",
                "#...#...#...#..E#",
                "#.#.#.#.#.#.#.#.#",
                "#.#.#.#...#...#.#",
                "#.#.#.#.###.#.#.#",
                "#...#.#.#.....#.#",
                "#.#.#.#.#.#####.#",
                "#.#...#.#.#.....#",
                "#.#.#####.#.###.#",
                "#.#.#.......#...#",
                "#.#.###.#####.###",
                "#.#.#...#.....#.#",
                "#.#.#.#####.###.#",
                "#.#.#.........#.#",
                "#.#.#.#########.#",
                "#S#.............#",
                "#################"
        );
        Grid grid = Grid.fromInput(input);
        List<Action> actions = Part01.findMinActions(input);

        List<String> actual = Part01.toOutput(grid, actions);

        assertThat(actual).containsExactly(
                "#################",
                "#...#...#...#..^#",
                "#.#.#.#.#.#.#.#^#",
                "#.#.#.#...#...#^#",
                "#.#.#.#.###.#.#^#",
                "#>>v#.#.#.....#^#",
                "#^#v#.#.#.#####^#",
                "#^#v..#.#.#>>>>^#",
                "#^#v#####.#^###.#",
                "#^#v#..>>>>^#...#",
                "#^#v###^#####.###",
                "#^#v#>>^#.....#.#",
                "#^#v#^#####.###.#",
                "#^#v#^........#.#",
                "#^#v#^#########.#",
                "#^#>>^..........#",
                "#################"
                );
    }

    @Test
    void solve1() {
        List<String> input = List.of(
                "###############",
                "#.......#....E#",
                "#.#.###.#.###.#",
                "#.....#.#...#.#",
                "#.###.#####.#.#",
                "#.#.#.......#.#",
                "#.#.#####.###.#",
                "#...........#.#",
                "###.#.#####.#.#",
                "#...#.....#.#.#",
                "#.#.#.###.#.#.#",
                "#.....#...#.#.#",
                "#.###.#.#.#.#.#",
                "#S..#.....#...#",
                "###############"
        );
        long actual = Part01.solve(input);
        assertThat(actual).isEqualTo(7036L);
    }

    @Test
    void solve2() {
        List<String> input = List.of(
                "#################",
                "#...#...#...#..E#",
                "#.#.#.#.#.#.#.#.#",
                "#.#.#.#...#...#.#",
                "#.#.#.#.###.#.#.#",
                "#...#.#.#.....#.#",
                "#.#.#.#.#.#####.#",
                "#.#...#.#.#.....#",
                "#.#.#####.#.###.#",
                "#.#.#.......#...#",
                "#.#.###.#####.###",
                "#.#.#...#.....#.#",
                "#.#.#.#####.###.#",
                "#.#.#.........#.#",
                "#.#.#.#########.#",
                "#S#.............#",
                "#################"
        );
        long actual = Part01.solve(input);
        assertThat(actual).isEqualTo(11048L);
    }
}